{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","selectors/auth-selectors.tsx","selectors/todolist-selectors.tsx","selectors/todolist-selectors copy.tsx","features/TodolistsList/TodolistsList.tsx","selectors/app-selectors.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/404/404.tsx","assets/background-min.jpg","assets/darkbackground-min.jpg","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","thunkAPI","a","res","resultCode","value","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","param","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","sli—Åe","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","useAppDispatch","useDispatch","window","AddItemForm","React","memo","addItem","disabled","label","useState","setTitle","setError","addItemHandler","trim","style","display","alignItems","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","console","log","editMode","setEditMode","completedStyle","Completed","textDecoration","autoFocus","onBlur","onDoubleClick","Task","removeTask","useCallback","changeTaskStatus","changeTaskTitle","newTitle","onRemoveTaskHandler","onChangeTaskStatusHandler","checked","New","onTitleChangeHandler","newValue","className","position","width","Checkbox","right","top","Delete","Todolist","demo","addTask","changeTodolistTitle","removeTodolist","useEffect","addTaskHandler","removeTodolistHandler","changeTodolistTitleHandler","changeFilter","tasksForTodolist","filterButton","text","Button","paddingTop","selectIsLoggedIn","selectTodolists","selectTasks","TodolistsList","useSelector","addTodolist","Grid","container","padding","Paper","spacing","flexWrap","allTodolistTasks","to","selectStatus","selectIsInitialized","selectError","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","Login","isLogedIn","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","rejected","match","setFieldError","field","justifyContent","marginTop","handleSubmit","FormControl","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","FormLabel","href","target","Page404","darkTheme","createTheme","palette","mode","lightTheme","App","theme","setTheme","setChecked","textAlign","CircularProgress","background","backgroundImg","darkBgImg","ThemeProvider","overflowX","height","AppBar","Toolbar","edge","aria-label","Menu","Typography","marginRight","Switch","inputProps","LinearProgress","Container","fixed","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e43baed5.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a60fb14a-6f41-481f-9441-d849223c43b5'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginDataType) {\r\n        return instance.post<LoginDataType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<GetAuthDataType>>('/auth/me')\r\n    }\r\n }\r\n \r\n\r\n// types\r\nexport type GetAuthDataType = {\r\n    id: number\r\nemail: string\r\nlogin: string\r\n\r\n}\r\n\r\n\r\n\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldsErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldsErrorType>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error:error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {todolistsAPI, authAPI, LoginDataType, FieldsErrorType} from './../../api/todolists-api';\r\nimport {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createSlice, PayloadAction, createAsyncThunk} from '@reduxjs/toolkit';\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const loginTC = createAsyncThunk<{value: boolean}, LoginDataType, {rejectValue:{errors: Array<string>, fieldsErrors?: Array<FieldsErrorType>}}>('auth/login', async (data, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {value: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers(builder) {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.value\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\"\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError} from \"../utils/error-utils\";\r\n\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch, rejectWithValue}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}));\r\n    } else {\r\n        handleServerAppError(res.data, dispatch);\r\n    }\r\n\r\n})\r\n\r\nconst sli—Åe = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers(builder) {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = sli—Åe.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC, setAppStatusAC} = sli—Åe.actions\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk('todolist/fetchTodolists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolist/removeTodolist', async (param: { todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(param.todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: param.todolistId}\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolist/addTodolist', async (param: { title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(param.title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolist/changeTodolistTitle', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: param.id, title: param.title}\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers(builder) {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// actions\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC\r\n} = slice.actions\r\n\r\n// thunks\r\n\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from \"./todolists-reducer\";\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, {dispatch,rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    }\r\n    catch (err:any){\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue,\r\n    getState\r\n}) => {\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {taskId: param.taskId, model: param.domainModel, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\n\r\nconst sli—Åe = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers(builder) {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                state[action.payload.todolistId].splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => action.payload ? t.id === action.payload.taskId : t)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = sli—Åe.reducer\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer:rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n// —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ store –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    label: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false, label}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div style={{\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    }}>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={label}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    status?: TaskStatuses\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const completedStyle = props.status === TaskStatuses.Completed ? {\r\n        color: '#c9c5c5',\r\n        textDecoration: 'line-through'\r\n    } : {}\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode} style={completedStyle}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {removeTaskTC, updateTaskTC} from \"../../tasks-reducer\";\r\nimport {useAppDispatch} from \"../../../../app/store\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo(({task, todolistId, ...props}: TaskPropsType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC({taskId: id, todolistId}))\r\n    }, [])\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC({taskId: id, domainModel: {status}, todolistId}))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC({taskId: id, domainModel: {title: newTitle}, todolistId}))\r\n    }, [])\r\n\r\n    const onRemoveTaskHandler = useCallback(() => removeTask(task.id, todolistId), [task.id, todolistId]);\r\n\r\n    const onChangeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todolistId)\r\n    }, [task.id, todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue, todolistId)\r\n    }, [task.id, todolistId]);\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative', width: 230}}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeTaskStatusHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler} status={task.status}/>\r\n        <IconButton onClick={onRemoveTaskHandler} style={{position: 'absolute', right: -35, top: 0}}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {changeTodolistFilterAC, FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {OverridableStringUnion} from \"@mui/types\";\r\nimport {ButtonPropsColorOverrides} from \"@mui/material/Button/Button\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({\r\n                                                 demo = false,\r\n                                                 todolist,\r\n                                                 tasks,\r\n                                                 addTask,\r\n                                                 changeTodolistTitle,\r\n                                                 removeTodolist,\r\n                                                 ...props\r\n                                             }: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todolist.id)\r\n    }, [addTask, todolist.id])\r\n\r\n    const removeTodolistHandler = useCallback(() => {\r\n        removeTodolist(todolist.id)\r\n    },[todolist.id])\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [todolist.id, changeTodolistTitle])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC({id: todolistId, filter: value}))\r\n    }, [])\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const filterButton = (filter: FilterValuesType, color: OverridableStringUnion<'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning',\r\n        ButtonPropsColorOverrides>, text: string) => {\r\n        return <Button variant={todolist.filter === filter ? 'outlined' : 'text'}\r\n                       onClick={() => changeFilter(filter, todolist.id)}\r\n                       color={color}\r\n        >{text}</Button>\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{position: 'relative'}}><EditableSpan value={todolist.title} onChange={changeTodolistTitleHandler}/>\r\n            <IconButton onClick={removeTodolistHandler} disabled={todolist.entityStatus === 'loading'}\r\n                        style={{position: 'absolute', top: '-25px', right: '-5px'}}>\r\n                <ClearIcon/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskHandler} disabled={todolist.entityStatus === 'loading'} label={'New task'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}/>)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {filterButton('all', 'inherit', 'All')}\r\n            {filterButton('active', 'primary', 'Active')}\r\n            {filterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { AppRootStateType } from \"../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state:AppRootStateType) => state.auth.isLoggedIn","import { AppRootStateType } from \"../app/store\";\r\n\r\nexport const selectTodolists = (state:AppRootStateType) => state.todolists","import { AppRootStateType } from \"../app/store\";\r\n\r\nexport const selectTasks = (state:AppRootStateType) => state.tasks","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {useAppDispatch} from '../../app/store'\r\nimport {addTodolistTC, changeTodolistTitleTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {addTaskTC} from './tasks-reducer'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../../selectors/auth-selectors'\r\nimport {selectTodolists} from '../../selectors/todolist-selectors'\r\nimport {selectTasks} from '../../selectors/todolist-selectors copy'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector(selectTodolists)\r\n    const tasks = useSelector(selectTasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC({title, todolistId}))\r\n    }, [])\r\n\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC({todolistId: id}))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC({id, title}))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC({title}))\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <Paper style={{padding: '10px'}}>\r\n                <AddItemForm addItem={addTodolist} label={'New card'}/>\r\n            </Paper>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px', width: '260px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                addTask={addTask}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import { AppRootStateType } from \"../app/store\";\r\n\r\nexport const selectStatus = (state:AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state:AppRootStateType) => state.app.isInitialized\r\nexport const selectError = (state:AppRootStateType) => state.app.error","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\nimport {selectError} from '../../selectors/app-selectors';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector(selectError)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {LoginDataType} from '../../api/todolists-api';\r\nimport {useAppDispatch} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {Paper} from \"@mui/material\";\r\nimport {selectIsLoggedIn} from '../../selectors/auth-selectors';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLogedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginDataType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            }\r\n            // else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            //     errors.email = 'Invalid email address';\r\n            // }\r\n            // else if (!/^(?=.*[a-z])(?=.*[0-9]).{6,}/.test(values.password)){\r\n            //    errors.password = 'Invalid password (pass must contain one main letter, one number and 6 symbols)'\r\n            // }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: async (values, formikHelpers) => {\r\n            const res = await dispatch(loginTC(values));\r\n            if (loginTC.rejected.match(res)) {\r\n                if (res.payload?.fieldsErrors?.length) {\r\n                    debugger\r\n                    const error = res.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n\r\n            }\r\n            //formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLogedIn) {\r\n        return <Navigate to='/'/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <Paper style={{padding: '25px', marginTop: '30px'}}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n\r\n                        <FormGroup>\r\n                            <TextField label=\"Email\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps('email')}\r\n                                       onBlur={formik.handleBlur}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                            <TextField type=\"password\"\r\n                                       label=\"Password\"\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps('password')}\r\n                                       onBlur={formik.handleBlur}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","\r\nimport React from 'react'\r\n\r\n\r\nexport const Page404 = () => {\r\n   return <h1>404: PAGE NOT FOUND</h1>\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/background-min.c61871be.jpg\";","export default __webpack_public_path__ + \"static/media/darkbackground-min.67774085.jpg\";","import React, {useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {Page404} from '../features/404/404'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport backgroundImg from '../assets/background-min.jpg'\r\nimport darkBgImg from '../assets/darkbackground-min.jpg'\r\nimport {createTheme, ThemeProvider} from '@mui/material/styles';\r\nimport {Switch} from \"@mui/material\";\r\nimport {selectIsInitialized, selectStatus} from '../selectors/app-selectors'\r\nimport {selectIsLoggedIn} from '../selectors/auth-selectors'\r\n\r\nconst darkTheme = createTheme({\r\n    palette: {\r\n        mode: 'dark',\r\n    },\r\n});\r\n\r\nconst lightTheme = createTheme({\r\n    palette: {\r\n        mode: 'light',\r\n    },\r\n});\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n\r\n    const [theme, setTheme] = useState(lightTheme)\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setChecked(e.target.checked);\r\n        if (checked) {\r\n            setTheme(lightTheme)\r\n        } else {\r\n            setTheme(darkTheme)\r\n        }\r\n    };\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n\r\n    }\r\n    const background = theme === lightTheme ? `url(${backgroundImg})` : `url(${darkBgImg})`\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <div className=\"App\" style={{background: background, overflowX: 'auto', height: '100vh'}}>\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"fixed\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" style={{marginRight: 15}}>\r\n                            Menu\r\n                        </Typography>\r\n                        {theme === lightTheme ? <span>light theme</span> : <span>dark theme</span>}\r\n                        <Switch\r\n                            checked={checked}\r\n                            onChange={handleChange}\r\n                            inputProps={{'aria-label': 'controlled'}}\r\n                        />\r\n                        {isLoggedIn && <Button color=\"inherit\"\r\n                                               variant={\"outlined\"}\r\n                                               style={{marginRight: '20px', position: 'absolute', right: 0}}\r\n                                               onClick={logoutHandler}>Logout</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n\r\n                <Container fixed style={{marginTop: '90px'}}>\r\n                    <Routes>\r\n                        <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path='login' element={<Login/>}/>\r\n                        <Route path='404' element={<Page404/>}/>\r\n                        <Route path=\"*\" element={<Navigate to='404'/>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}